//GameBoardManager Class:

package Sudoku;

// This class handles the game board. It includes main.
public class GameBoardManager {
	
	// This is the main for the Sudoku game.
	public static void main(String[] args) {	
		GameBoard newGame = new GameBoard();
	}
}

//GameBoard Class:

package Sudoku;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.awt.Graphics;
import java.awt.Graphics2D;


// This class creates the UI for the GameBoard
public class GameBoard {

	// This is the constructor for the GameBoard. It calls createGameBoard().
	protected GameBoard() {
		
		createGameBoard();
	}
	
	// This function creates the game board.
	private void createGameBoard() {
		
		// Create new JFrame and JPanels.
		JFrame frame = new JFrame("Sudoku");
		SudokuJPanel panel = new SudokuJPanel();
		
		// Set size and layout for SudokuPanel.
		panel.setSize(680,680);
		panel.setLayout(new GridLayout(9,9));
		
		// Add SudokuPanel to Jframe.
		frame.add(panel,BorderLayout.CENTER);
		
		// Provide final details regarding JFrame.
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    frame.setSize(635,660);
	    frame.setLocation(325,600);
	    frame.setResizable(false);
	    frame.setVisible(true);
	}
}

//SudokuJPanel Class:

package Sudoku;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.font.FontRenderContext;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

// This class extends the JPanel. It facilitates in all actions that occur within the SudokuJPanels.
public class SudokuJPanel extends JPanel {
	private String[][]originalStringContents = new String[9][9];
	private String[][]gameStringContents = new String[9][9];
	private final String location = "//Users//Camille//Documents//COEN275//Assignment1//src/Sudoku//contents.txt";
	private File file;
	private int currentlySelectedRow;
	private int currentlySelectedCol;
	private SudokuJPanel object = this;
	
	/* This is the constructor for the SudokuJPanel class. It initializes the input file, and initiates ReadContents.
	 * It also holds the mouse listener.
	 */
	protected SudokuJPanel(){
		file = new File(location);
		readContents();
		addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				int slotWidth = 70;
				int slotHeight = 70;
			
				currentlySelectedRow = e.getX() / slotHeight;
				currentlySelectedCol = e.getY() / slotWidth;
			
				if(originalStringContents[currentlySelectedRow][currentlySelectedCol].equals("0")) {
					PopUpManager popUp = new PopUpManager(object);
				}
			}
		});
	}
	
	/* This function reads the input in from the file and separates each value into the 
	 * gameStringContents array.
	 */
	private void readContents() {
		final String DELIMITER = ",";
		String[]values=new String[81];
		
		try {
			BufferedReader bufferedReader = new BufferedReader(new FileReader(file)); //Bufferedreader reads one line.
			String line = "";
			int j = 0;
			
			while((line = bufferedReader.readLine()) != null) {
				
				values = line.split(DELIMITER);
				
	            for (int i = 0; i < values.length; i++) {
	            	gameStringContents[i][j]= values[i];
	            	originalStringContents[i][j]=values[i];
	            }  
	            j++;
			}
			bufferedReader.close();	
		} catch (FileNotFoundException ex) {
			System.out.println("FileNotFoundException Occurred");
		} catch (IOException ex) {
			System.out.println ("IOException Occurred");
		}
	}
	
	// This function updates the data within the SudokoPanel and the gameStringContents array.
	protected void updateData(String num) {
		boolean boardStatus = false;
		
		gameStringContents[currentlySelectedRow][currentlySelectedCol] = num;
		
		this.revalidate();
		this.repaint();
		
		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++){
				if(Integer.parseInt(gameStringContents[i][j]) > 0 && Integer.parseInt(gameStringContents[i][j]) < 10) {
					continue; 
				}
				else {
					boardStatus = false;
					return;
				}
			}
		}
		boardStatus = true;
		
		if (boardStatus) {
			SolutionChecker solution = new SolutionChecker(gameStringContents);
		}
	}
	
	// This function handles the graphics within the SudokuJPanels, including the borders and painting of values.
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2d = (Graphics2D) g;
		
		// Set the color of the SudokoJPanel and grid.
		g2d.setColor(new Color(224,224,224));
		g2d.setColor(new Color(255,255,255));
		
		// Set the stroke width for the vertical grid.
		for(int x = 0;x <= 630;x+=70) {
			if((x % 210) == 0) {
				g2d.setColor(new Color(255,255,255));
				g2d.setStroke(new BasicStroke(10));
				g2d.drawLine(x, 0, x, 630);
			}
			else {
				g2d.setColor(new Color(255,255,255));
				g2d.setStroke(new BasicStroke(2));
				g2d.drawLine(x, 0, x, 630);
			}
		}
			
		// Set the stroke width for the horizontal grid.
		for(int y = 0;y <= 630;y+=70) {
			if((y % 210) == 0) {
				g2d.setColor(new Color(255,255,255));
				g2d.setStroke(new BasicStroke(10));
				g2d.drawLine(0, y, 630, y);
				}
			else {
				g2d.setColor(new Color(255,255,255));
				g2d.setStroke(new BasicStroke(2));
				g2d.drawLine(0, y, 630, y);
			}
		}
		
		// Paint the values into the SudokoJPanel from originalStringContents.
		Font f = new Font("Arial", Font.PLAIN, 24);
		g2d.setFont(f);
		FontRenderContext fContext = g2d.getFontRenderContext();
		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				if(Integer.parseInt(originalStringContents[i][j]) > 0 && Integer.parseInt(originalStringContents[i][j]) < 10) {
						g2d.setColor(new Color(96,96,96));
						g2d.drawString(originalStringContents[i][j],((i*70)+25),((j*70)+40));
			
				}	
			}
		}
		
		// Paint the values into the SudokoJPanel from gameStringContents.
		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				if(Integer.parseInt(gameStringContents[i][j]) != Integer.parseInt(originalStringContents[i][j])){
					if(Integer.parseInt(gameStringContents[i][j]) > 0 && Integer.parseInt(gameStringContents[i][j]) < 10) {
							g2d.setColor(new Color(255,0,127));
							g2d.drawString(gameStringContents[i][j],((i*70)+25),((j*70)+40));
					}
				}	
			}
		}
	}
}

//PopUpManager Class:

package Sudoku;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.NumberFormat;
import java.util.InputMismatchException;

import javax.swing.*;

// This class holds all the pop-ups for the game.
public class PopUpManager {
	
	// This is the constructor for the PopUpManager. It calls createPopUpOne().
	protected PopUpManager(SudokuJPanel panel)
	{
		createPopUpOne(panel);
	}
	
	/* This is the constructor for the PopUpManager that takes in a boolean input. It then
	 * calls either createPopUpTwo() or createPopUpThree() depending on the input status.
	 */
	protected PopUpManager(boolean status)
	{
		if(status == true) {
			createPopUpTwo();
		}
		else {
			createPopUpThree();
		}
	}
	
	/* This function handles pop-up one. It allows for the user to input a number into the
	 * Sudoku board.
	 */
	private void createPopUpOne(SudokuJPanel panel){
		
		// Create JFrame, JPanels, JButtons, JLabels, and JTextField.
		JFrame frame = new JFrame("Input");
		JPanel panel1 = new JPanel();
		JPanel panel2= new JPanel();
		JPanel panel3 = new JPanel();
		JPanel panel4 = new JPanel();
		JButton button1 = new JButton("OK");
		JButton button2 = new JButton("Cancel");
		JLabel label1 = new JLabel("Enter a number");
		JTextField textField = new JTextField(20);
				
		// Set layout for the panels as FlowLayout.
		panel1.setLayout(new FlowLayout());
		panel2.setLayout(new FlowLayout());
		panel3.setLayout(new FlowLayout());
		panel4.setLayout(new FlowLayout());
		
	    // Add JLabel, JTextField, and JButtons to JPanels.
	    panel2.add(label1);
	    panel3.add(textField);
	    panel4.add(button1);
	    panel4.add(button2);
	    
	    // Add an action listener to button1.
	    button1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {
	
				try {
					String num = textField.getText();
					if (Integer.parseInt(num) > 0 && Integer.parseInt(num) < 10) {
						frame.dispose();
						panel.updateData(num);
					}
					else {
						System.out.println("Invalid entry");
					}
				} catch(InputMismatchException e) {
					System.out.println("InputMismatchException Occurred");
				} catch(NumberFormatException e) {
					System.out.println("NumberFormatException Occurred");
				}
			}
		});
	    
	    // Add an action listener to button2.
	    button2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {
				frame.dispose();
			}
		});
	    
	    // Add JPanels to JFrame using BorderLayout.
		frame.add(panel1, BorderLayout.EAST);
		frame.add(panel2, BorderLayout.NORTH);
		frame.add(panel3, BorderLayout.CENTER);
		frame.add(panel4, BorderLayout.SOUTH);
		
		// Provide final details regarding JFrame.
		frame.getRootPane().setDefaultButton(button1);
	    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    frame.setSize(400, 150);
	    frame.setResizable(false);
	    frame.setLocation(450,250);
	    frame.setVisible(true);
	}
	
	// This function handles pop-up two. It displays a message if the Sudoku solution is correct.
	private void createPopUpTwo(){
		
		// Create JFrame, JPanels, JButtons, JLabels, and JTextField.
		JFrame frame = new JFrame("Message");
		JPanel panel1 = new JPanel();
		JPanel panel2= new JPanel();
		JPanel panel3 = new JPanel();
		JButton button1 = new JButton("OK");
		JLabel label1 = new JLabel("You won the Sudoku!");
	
		// Set layout for the panels as FlowLayout.
		panel1.setLayout(new FlowLayout());
		panel2.setLayout(new FlowLayout());
		panel3.setLayout(new FlowLayout());
		
	    // Add JLabel, JTextField, and JButtons to JPanels.
	    panel2.add(label1);
	    panel3.add(button1);
	    
	    // Add an action listener to button1.
	    button1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {
				frame.dispose();
			}
		});
	    
	    // Add JPanels to JFrame using BorderLayout.
		frame.add(panel1, BorderLayout.EAST);
		frame.add(panel2, BorderLayout.CENTER);
		frame.add(panel3, BorderLayout.SOUTH);
		
		// Provide final details regarding JFrame.
		frame.getRootPane().setDefaultButton(button1);
	    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    frame.setSize(400, 100);
	    frame.setResizable(false);
	    frame.setLocation(450,250);
	    frame.setVisible(true);
	}

	// This function handles pop-up three. It displays a message if the Sudoku solution is incorrect.
	private void createPopUpThree(){
		
		// Create JFrame, JPanels, JButtons, JLabels, and JTextField.
		JFrame frame = new JFrame("Message");
		JPanel panel1 = new JPanel();
		JPanel panel2= new JPanel();
		JPanel panel3 = new JPanel();
		JButton button1 = new JButton("Go Back to Game Board");
		JButton button2 = new JButton("Start Over");
		JLabel label1 = new JLabel("Incorrect Solution");
		
		// Set layout for the panels as FlowLayout.
		panel1.setLayout(new FlowLayout());
		panel2.setLayout(new FlowLayout());
		panel3.setLayout(new FlowLayout());
	
	    // Add JLabel, JTextField, and JButtons to JPanels.
	    panel2.add(label1);
	    panel3.add(button1);
	    panel3.add(button2);
	    
	    // Add an action listener to button1.
	    button1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {
				frame.dispose();	
			}
		});
	    
	    // Add an action listener to button2.
	    button2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {
				frame.dispose();
				GameBoard newGame = new GameBoard();
			}
		});
	    
	    // Add JPanels to JFrame using BorderLayout.
		frame.add(panel1, BorderLayout.EAST);
		frame.add(panel2, BorderLayout.CENTER);
		frame.add(panel3, BorderLayout.SOUTH);
		
		// Provide final details regarding JFrame.
		frame.getRootPane().setDefaultButton(button1);
	    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    frame.setSize(400, 100);
	    frame.setResizable(false);
	    frame.setLocation(450,250);
	    frame.setVisible(true);
	}
}

//SolutionChecker Class:

package Sudoku;

// This class checks whether the sudoku board is correct.
public class SolutionChecker {
	
	protected SolutionChecker(String[][] solutionGrid) {
		solution(solutionGrid);
	}
	
	/* This function takes in the solution grid and iterates through the rows, columns, and
	 * 3x3 grids to confirm that there are no repeats of integers.
	 */
	private void solution(String[][] solutionGrid){
		
		boolean status = true;
		
		// Check rows for duplicates
		for(int i = 0; i < 9; i++) {
			for(int j = 0; j < 8; j++) {
				for(int k = j + 1; k < 9; k++) {
					if(Integer.parseInt(solutionGrid[i][j])==Integer.parseInt(solutionGrid[i][k])) {
						status = false;
					}
				}
			}
		}

		// Check columns for duplicates.
		for(int j = 0; j < 9; j++) {
			for(int i = 0; i < 8; i++) {
				for(int k = i + 1; k < 9; k++) {
					if(Integer.parseInt(solutionGrid[i][j])==Integer.parseInt(solutionGrid[k][j])) {
						status = false;
					}
				}
			}
		}

		// Check 3x3 squares for duplicates.
		for(int i = 0; i < 9; i += 3) {
			for(int j = 0; j < 9; j += 3) {
				for(int k = 0; k < 8; k++) {
					for(int l = k + 1; l < 9; l++) {
						if(Integer.parseInt(solutionGrid[i + k%3][j + k/3])==Integer.parseInt(solutionGrid[i + l%3][j + l/3])) {
							status = false;
						}
					}
				}
			}
		}
		   
		PopUpManager popUp = new PopUpManager(status);
	}
}



